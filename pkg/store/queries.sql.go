// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package store

import (
	"context"
	"database/sql"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO Board (name, color, accountId)
VALUES (?, ?, ?)
RETURNING id, name, color, createdat, accountid
`

type CreateBoardParams struct {
	Name      string         `json:"name"`
	Color     sql.NullString `json:"color"`
	Accountid string         `json:"accountid"`
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard, arg.Name, arg.Color, arg.Accountid)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Createdat,
		&i.Accountid,
	)
	return i, err
}

const createColumn = `-- name: CreateColumn :one
INSERT INTO Column (id, boardId, name, "order")
VALUES (?, ?, ?, ?)
RETURNING id, name, "order", boardid
`

type CreateColumnParams struct {
	ID      string          `json:"id"`
	Boardid int64           `json:"boardid"`
	Name    string          `json:"name"`
	Order   sql.NullFloat64 `json:"order"`
}

func (q *Queries) CreateColumn(ctx context.Context, arg CreateColumnParams) (Column, error) {
	row := q.db.QueryRowContext(ctx, createColumn,
		arg.ID,
		arg.Boardid,
		arg.Name,
		arg.Order,
	)
	var i Column
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Order,
		&i.Boardid,
	)
	return i, err
}

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM Board
WHERE id = ? AND accountId = ?
`

type DeleteBoardParams struct {
	ID        int64  `json:"id"`
	Accountid string `json:"accountid"`
}

func (q *Queries) DeleteBoard(ctx context.Context, arg DeleteBoardParams) error {
	_, err := q.db.ExecContext(ctx, deleteBoard, arg.ID, arg.Accountid)
	return err
}

const deleteCard = `-- name: DeleteCard :exec
DELETE FROM Item
WHERE "Item".id = ? AND "Item".boardId = (SELECT id FROM Board WHERE accountId = ? LIMIT 1)
`

type DeleteCardParams struct {
	ID        string `json:"id"`
	Accountid string `json:"accountid"`
}

func (q *Queries) DeleteCard(ctx context.Context, arg DeleteCardParams) error {
	_, err := q.db.ExecContext(ctx, deleteCard, arg.ID, arg.Accountid)
	return err
}

const getBoard = `-- name: GetBoard :one
SELECT id, name, color, createdat, accountid FROM Board
WHERE id = ? AND accountId = ?
`

type GetBoardParams struct {
	ID        int64  `json:"id"`
	Accountid string `json:"accountid"`
}

func (q *Queries) GetBoard(ctx context.Context, arg GetBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoard, arg.ID, arg.Accountid)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Createdat,
		&i.Accountid,
	)
	return i, err
}

const getBoardColumns = `-- name: GetBoardColumns :many
SELECT id, name, "order", boardid FROM Column
WHERE boardId = ?
ORDER BY "order" ASC
`

func (q *Queries) GetBoardColumns(ctx context.Context, boardid int64) ([]Column, error) {
	rows, err := q.db.QueryContext(ctx, getBoardColumns, boardid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Column
	for rows.Next() {
		var i Column
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Order,
			&i.Boardid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoardItems = `-- name: GetBoardItems :many
SELECT id, title, content, "order", columnid, boardid FROM Item
WHERE boardId = ?
`

func (q *Queries) GetBoardItems(ctx context.Context, boardid int64) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getBoardItems, boardid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Order,
			&i.Columnid,
			&i.Boardid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHomeData = `-- name: GetHomeData :many
SELECT id, name, color, createdat, accountid FROM Board
WHERE accountId = ?
`

func (q *Queries) GetHomeData(ctx context.Context, accountid string) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, getHomeData, accountid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Createdat,
			&i.Accountid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBoardName = `-- name: UpdateBoardName :exec
UPDATE Board
SET name = ?
WHERE id = ? AND accountId = ?
`

type UpdateBoardNameParams struct {
	Name      string `json:"name"`
	ID        int64  `json:"id"`
	Accountid string `json:"accountid"`
}

func (q *Queries) UpdateBoardName(ctx context.Context, arg UpdateBoardNameParams) error {
	_, err := q.db.ExecContext(ctx, updateBoardName, arg.Name, arg.ID, arg.Accountid)
	return err
}

const updateColumnName = `-- name: UpdateColumnName :exec
UPDATE Column
SET name = ?
WHERE "Column".id = ? AND "Column".boardId = (SELECT id FROM Board WHERE accountId = ? LIMIT 1)
`

type UpdateColumnNameParams struct {
	Name      string `json:"name"`
	ID        string `json:"id"`
	Accountid string `json:"accountid"`
}

func (q *Queries) UpdateColumnName(ctx context.Context, arg UpdateColumnNameParams) error {
	_, err := q.db.ExecContext(ctx, updateColumnName, arg.Name, arg.ID, arg.Accountid)
	return err
}
